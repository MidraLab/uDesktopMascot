permissions:
  contents: write

name: Build and Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'タグ名を「v数字.数字.数字」の形式で入力してください（例：v1.0.0）'
        required: true

jobs:
  create-tag:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.get_tag.outputs.tag_name }}
    steps:
      - name: タグ名の検証と取得
        id: get_tag
        run: |
          TAG_NAME="${{ github.event.inputs.tag_name }}"
          if [[ ! "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "エラー: タグ名が有効な形式ではありません。v数字.数字.数字 の形式で入力してください。"
            exit 1
          fi
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT

      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: タグが既に存在しないか確認
        run: |
          TAG_NAME="${{ steps.get_tag.outputs.tag_name }}"
          if [ "$TAG_NAME" != "v99.99.99" ] && git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "エラー: タグ '$TAG_NAME' は既に存在します。"
            exit 1
          fi

      - name: タグを作成してプッシュ
        env:
          TAG_NAME: ${{ steps.get_tag.outputs.tag_name }}
        if: ${{ steps.get_tag.outputs.tag_name != 'v99.99.99' }}
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"

  check-branch:
    needs: [create-tag]
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.get_version.outputs.current_version }}
      project_version: ${{ steps.get_version.outputs.project_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: バージョンを取得
        id: get_version
        run: |
          TAG_NAME="${{ needs.create-tag.outputs.tag_name }}"
          echo "タグ名: $TAG_NAME"
          current_version="${TAG_NAME#v}"
          project_version=$(grep -m1 'bundleVersion:' ProjectSettings/ProjectSettings.asset | awk '{print $2}')
          echo "current_version=${current_version}" >> $GITHUB_OUTPUT
          echo "project_version=${project_version}" >> $GITHUB_OUTPUT

      - name: タグ名の確認
        run: |
          echo "イベント名: ${{ github.event_name }}"
          TAG_NAME="${{ needs.create-tag.outputs.tag_name }}"
          echo "タグ名: $TAG_NAME"

          # タグ名からバージョン番号を取得
          current_version="${TAG_NAME#v}"
          echo "現在のバージョン: $current_version"

          # gitから既存のバージョンタグのリストを取得
          git fetch --tags
          version_tags=$(git tag -l 'v*' | grep -v '^v99\.99\.99$')
          echo "既存のバージョンタグ: $version_tags"

          # タグからバージョン番号を抽出
          versions=()
          for tag in $version_tags; do
            if [[ "$tag" != "99.99.99" ]]; then
              versions+=("${tag#v}")
            fi
          done

          if [ ${#versions[@]} -eq 0 ]; then
            highest_version="0.0.0"
          else
            highest_version=$(printf '%s\n' "${versions[@]}" | sort -V | tail -n1)
          fi
          echo "最高の既存バージョン: $highest_version"

          # 現在のバージョンと最高の既存バージョンを比較
          if [ "$(printf '%s\n' "$highest_version" "$current_version" | sort -V | tail -n1)" != "$current_version" ]; then
            echo "エラー: 現在のバージョン ($current_version) は最高の既存バージョン ($highest_version) よりも高くありません。"
            exit 1
          else
            echo "現在のバージョン ($current_version) は最高の既存バージョン ($highest_version) よりも高いです。"
          fi

  build-windows:
    needs: [create-tag, check-branch]
    runs-on: windows-latest
    steps:
      - name: Check out my unity project.
        uses: actions/checkout@v4.2.2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v4.2.0
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: ビルド情報を設定
        id: build_info
        shell: bash  # ここでシェルを 明示的にBash に指定します
        run: |
          TAG_NAME="${{ needs.create-tag.outputs.tag_name }}"
          VERSION="${{ needs.check-branch.outputs.current_version }}"
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          ARTIFACT_NAME="${REPO_NAME}_win_v${VERSION}"
          echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4.2.0
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      - name: Run the build for StandaloneWindows64
        uses: game-ci/unity-builder@v4.3.0
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: StandaloneWindows64
          unityVersion: '6000.1.1f1'
          buildName: 'uDesktopMascot'
          versioning: Custom
          version: ${{ needs.check-branch.outputs.current_version }}

      - name: Update setup.iss
        shell: bash
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          
          # リモートの最新変更を取得してリベース
          git fetch origin
          git rebase origin/${{ github.ref_name }} --autostash
          
          git add setup.iss
          if ! git diff --cached --quiet; then
            git commit -m "Update setup.iss"
            git push origin HEAD:${{ github.ref }}
          else
            echo "No changes to setup.iss, skipping commit and push"
          fi

      - name: ビルド成果物の名前を変更
        run: |
          cd build
          mv "StandaloneWindows64" "uDesktopMascot"
          cd ..

      - name: Set up Inno Setup
        uses: Minionguyjpro/Inno-Setup-Action@v1.0.0
        with:
          path: 'setup.iss'

      - name: Upload Installer
        uses: actions/upload-artifact@v4.6.0
        with:
          name: uDesktopMascot_win64_installer_v${{ needs.check-branch.outputs.current_version }}
          path: "uDesktopMascot_win64_installer_v${{ needs.check-branch.outputs.current_version }}.exe"

      - name: Install 7-Zip (Windows)
        shell: powershell
        run: |
          choco install 7zip -y

      - name: ビルド成果物を圧縮
        shell: cmd
        run: |
          cd build
          "C:\Program Files\7-Zip\7z.exe" a -r "uDesktopMascot_win_v${{ needs.check-branch.outputs.current_version }}.zip" "uDesktopMascot"
          cd ..

      - name: Upload the Build for StandaloneWindows64
        uses: actions/upload-artifact@v4.6.0
        with:
          name: uDesktopMascot_win_v${{ needs.check-branch.outputs.current_version }}
          path: build/uDesktopMascot_win_v${{ needs.check-branch.outputs.current_version }}.zip

  build-mac:
    needs: [create-tag, check-branch]
    runs-on: macos-latest
    steps:
      - name: Check out my unity project.
        uses: actions/checkout@v4.2.2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v4.2.0
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: ビルド情報を設定
        id: build_info
        shell: bash  # ここでシェルを 明示的にBash に指定します
        run: |
          TAG_NAME="${{ needs.create-tag.outputs.tag_name }}"
          VERSION="${{ needs.check-branch.outputs.current_version }}"
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          ARTIFACT_NAME="${REPO_NAME}_mac_v${VERSION}"
          echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4.2.0
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      - name: Run the build for StandaloneOSX
        uses: game-ci/unity-builder@v4.3.0
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: StandaloneOSX
          unityVersion: '6000.1.1f1'
          buildName: 'uDesktopMascot'
          versioning: Custom
          version: ${{ needs.check-branch.outputs.current_version }}

      - name: ビルド成果物の名前を変更
        run: |
          cd build
          mv "StandaloneOSX" "uDesktopMascot"
          cd ..

      - name: Set up Installer
        run: |
          cd build
          productbuild --component uDesktopMascot/uDesktopMascot.app /Applications ./uDesktopMascot_mac_installer_v${{ needs.check-branch.outputs.current_version }}.pkg

      - name: Upload Installer
        uses: actions/upload-artifact@v4.6.0
        with:
          name: uDesktopMascot_mac_installer_v${{ needs.check-branch.outputs.current_version }}
          path: build/uDesktopMascot_mac_installer_v${{ needs.check-branch.outputs.current_version }}.pkg

      - name: ビルド成果物を圧縮
        run: |
          cd build
          zip -r "uDesktopMascot_mac_v${{ needs.check-branch.outputs.current_version }}.zip" "uDesktopMascot"
          cd ..

      - name: Upload the Build for StandaloneOSX
        uses: actions/upload-artifact@v4.6.0
        with:
          name: uDesktopMascot_mac_v${{ needs.check-branch.outputs.current_version }}
          path: build/uDesktopMascot_mac_v${{ needs.check-branch.outputs.current_version }}.zip

  deploy-itchio:
    needs: [build-windows, build-mac, check-branch]
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name != 'pull_request' && (github.event_name == 'schedule' || startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/tags/'))) }}
    runs-on: ubuntu-latest

    concurrency:
      group: deploy-itchio-${{ github.ref }}-${{ matrix.platform }}
      cancel-in-progress: true

    strategy:
      fail-fast: false
      matrix:
        platform: [ windows, mac ]

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.platform == 'windows' && format('uDesktopMascot_win_v{0}', needs.check-branch.outputs.current_version) || format('uDesktopMascot_mac_v{0}', needs.check-branch.outputs.current_version) }}
          path: .

      - name: Determine package path
        id: pkg
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" == "windows" ]; then
            echo "pkg_path=uDesktopMascot_win_v${{ needs.check-branch.outputs.current_version }}.zip" >> $GITHUB_OUTPUT
            echo "channel=windows-x64" >> $GITHUB_OUTPUT
          else
            echo "pkg_path=uDesktopMascot_mac_v${{ needs.check-branch.outputs.current_version }}.zip" >> $GITHUB_OUTPUT
            echo "channel=osx-universal" >> $GITHUB_OUTPUT
          fi

      - name: Push to itch.io
        uses: yeslayla/butler-publish-itchio-action@v1.0.3
        env:
          BUTLER_CREDENTIALS: ${{ secrets.ITCHIO_API_KEY }}
          ITCH_USER: midralab
          ITCH_GAME: uDesktopMascot
          CHANNEL: ${{ steps.pkg.outputs.channel }}
          PACKAGE: ${{ steps.pkg.outputs.pkg_path }}

  release:
    needs: [create-tag, check-branch, build-windows, build-mac]
    runs-on: ubuntu-latest
    steps:
      - name: コードをチェックアウト
        uses: actions/checkout@v4

      - name: アーティファクトをダウンロード
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: タグ名を取得
        id: vars
        run: |
          TAG_NAME="${{ needs.create-tag.outputs.tag_name }}"
          echo "リリースタグ名は '${TAG_NAME}' です"
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT

      - name: ドラフトリリースを作成し、アーティファクトをアップロード
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.tag_name }}
          draft: true
          files: |
            artifacts/uDesktopMascot_mac_installer_v${{ needs.check-branch.outputs.current_version }}/uDesktopMascot_mac_installer_v${{ needs.check-branch.outputs.current_version }}.pkg
            artifacts/uDesktopMascot_win64_installer_v${{ needs.check-branch.outputs.current_version }}/uDesktopMascot_win64_installer_v${{ needs.check-branch.outputs.current_version }}.exe
            artifacts/uDesktopMascot_mac_v${{ needs.check-branch.outputs.current_version }}/uDesktopMascot_mac_v${{ needs.check-branch.outputs.current_version }}.zip
            artifacts/uDesktopMascot_win_v${{ needs.check-branch.outputs.current_version }}/uDesktopMascot_win_v${{ needs.check-branch.outputs.current_version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}